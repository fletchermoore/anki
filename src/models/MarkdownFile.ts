import { Uri, workspace, window } from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import { Card } from './Card';


export class MarkdownFile {
  private readonly metaStart = `[//]: # (Autogenerated Anki Metadata -- delete to disable sync)`;
  private readonly metaEnd = `[//]: # (End Autogenerated Anki Metadata)`;
  public uri: Uri;
  public cachedContent: string;
  public noteIds: number[] = [];
  private meta: string = "";

  constructor(uri: Uri | null) {
    if (uri) {
      this.uri = uri;
    } else {
      if (workspace.workspaceFolders && workspace.workspaceFolders.length > 0)
      {
        this.uri = workspace.workspaceFolders[0].uri;
      } else {
        this.uri = Uri.parse('.');
      }
    }    
    this.cachedContent = "";
  }

  private loadContent(content: string) {
    this.noteIds = this.readNoteIds(content);
    this.cachedContent = this.removeMeta(content.toString());
  }

  async load() {      
    try {
        const content = (await workspace.fs.readFile(this.uri)).toString();
        this.loadContent(content);
    }
    catch(e)
    {
        throw e;
    }
  }

  public dirPath()
  {
    return path.dirname(this.uri.fsPath);
  }

  private removeMeta(content: string) {
    const before = content.split(this.metaStart)[0];
    const endSplit = content.split(this.metaEnd);
    const after = endSplit.length > 1 ? endSplit[1] : "";
    console.log(before);
    return before + after;
  }

  // TODO: make line breaks consistent with what's used in the file
  public updateMeta(cards: Card[]) {
    const ids = cards.map(c => c.noteId ?? 0 );
    const metaBody = `[note-ids]: # (${ids.join(', ')})`;
    const meta = `\r\n${this.metaStart}\r\n${metaBody}\r\n${this.metaEnd}\r\n`;
    const content = this.cachedContent + meta;
    fs.writeFileSync(this.uri.fsPath, content);
  }

  private readNoteIds(content: string): number[] {
    const re = RegExp(/\[note-ids\]: # \((.+)\)/);
    const matches = content.match(re);
    if (matches) {
      return matches[1].split(', ').map(Number); // what is this wizardry
    }
    return [];
  }


  public static fromActiveTextEditor(): MarkdownFile
  {
    const uri = window.activeTextEditor?.document.uri;
    let file;
    if (uri) {
      file = new MarkdownFile(uri);
    } else {
      file = new MarkdownFile(null);
    }
    file.loadContent(window.activeTextEditor?.document.getText() ?? "");
    return file;
  }
}
